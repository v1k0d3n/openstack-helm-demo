#!/bin/bash
# Copyright 2017 Charter DNA Team (CTEC).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
### Declare colors to use during the running of this script:
declare -r GREEN="\033[0;32m"
declare -r RED="\033[0;31m"
declare -r YELLOW="\033[0;33m"

function echo_green {
  echo -e "${GREEN}$1"; tput sgr0
}
function echo_red {
  echo -e "${RED}$1"; tput sgr0
}
function echo_yellow {
  echo -e "${YELLOW}$1"; tput sgr0
}

ls -asl

source /opt/demo/.bootkube_env

##  USE ONLY IN CASES WHERE HOST ALREADY NOT DEFINED IN /etc/hosts:
### Add IP Address of Hosts in /etc/hosts:
HOST_IFACE=$(ip route | grep "^default" | head -1 | awk '{ print $5 }')
LOCAL_IP=$(ip addr | awk "/inet/ && /${HOST_IFACE}/{sub(/\/.*$/,\"\",\$2); print \$2}")
cat << EOF | sudo tee -a /etc/hosts
${LOCAL_IP} $(hostname)
EOF

### NEW INSTALLATIONS:
echo_green "\nPhase I: Installing system prerequisites:"
pkg="build-essential curl ethtool git lldpd socat traceroute vim ceph-common nfs-common"

for pkg in ${pkg}; do
    if sudo dpkg --get-selections | grep -q "^${pkg}[[:space:]]*install$" >/dev/null; then
        echo -e "${pkg} is already installed"
    else
        sudo apt-get update && sudo apt-get -qq install ${pkg}
        echo "Successfully installed ${pkg}"
    fi
done

curl https://raw.githubusercontent.com/rancher/install-docker/master/1.12.6.sh | bash


### PREPARE: /etc/resolv.conf
echo_green "\nPhase III: Preparing system DNS:"
sudo cp /etc/resolv.conf ${BOOTKUBE_DIR}/backups/

### PREPARE: /etc/resolv.conf
sudo -E bash -c "cat <<EOF > /etc/resolvconf/resolv.conf.d/head
nameserver ${NSERVER01}
EOF"
sudo -E bash -c "cat <<EOF > /etc/resolvconf/resolv.conf.d/base
search kubernetes ${KUBE_DNS_API} ${NSEARCH01} ${NSEARCH02}
EOF"
sudo resolvconf -u
# echo_yellow "\e[3mBootkube-CI Users: '/etc/resolv.conf is not a symbolic link' warning above is OK!\e[0m"

### PREPARE: /etc/hosts with idempotency (hostess):
mkdir -p $TMPDIR
### DOWNLOAD: bootkube
if [ ! -e /usr/local/bin/hostess ]; then
    sudo wget -O /usr/local/bin/hostess https://github.com/cbednarski/hostess/releases/download/v0.2.0/hostess_linux_${KUBE_ARCH}
    sudo chmod +x /usr/local/bin/hostess
fi
sudo hostess fix
sudo hostess add ${KUBE_DNS_API} ${KUBE_MASTER}
sudo hostess add kubernetes ${KUBE_MASTER}
sudo hostess fix

### PREPARE: /etc/systemd/system/kubelet.service
echo_green "\nPhase VI: Deploying the Kubelet systemd unit:"
printf "Kubelet deployed to host:\n"
echo "[Unit]
Description=Kubernetes Kubelet
Documentation=https://kubernetes.io/docs/admin/kubelet/
[Service]
EnvironmentFile=/etc/environment
ExecStartPre=/bin/mkdir -p /etc/kubernetes
ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
ExecStartPre=/bin/mkdir -p /opt/cni/bin
ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests
ExecStartPre=/bin/mkdir -p /var/lib/cni
ExecStart=/usr/local/bin/kubelet \\
  --allow-privileged \\
  --cloud-provider= \\
  --cluster_domain=cluster.local \\
  --cluster_dns='${NSERVER01}','${NSERVER02}','${NSERVER03}' \\
  --cni-conf-dir=/etc/cni/net.d \\
  --exit-on-lock-contention \\
  --hostname-override='${KUBE_IP}' \\
  --kubeconfig=/etc/kubernetes/kubeconfig \\
  --lock-file=/var/run/lock/kubelet.lock \\
  --minimum-container-ttl-duration=3m0s \\
  --node-labels=node-role.kubernetes.io/node \\
  --node-ip='${KUBE_IP}' \\
  --network-plugin=cni \\
  --pod-manifest-path=/etc/kubernetes/manifests \\
  --require-kubeconfig \\
  --v=2
Restart=always
RestartSec=5
[Install]
WantedBy=multi-user.target" | sudo tee /etc/systemd/system/kubelet.service

### DOWNLOAD: kubelet
if [[ ! -e '${TMPDIR}'/'${KUBERNETES_VERSION}'-kubelet-${KUBE_ARCH} && ! -e /usr/local/bin/kubelet ]]; then
    wget -O ${TMPDIR}/${KUBERNETES_VERSION}-kubelet-${KUBE_ARCH} http://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/${KUBE_ARCH}/kubelet
    chmod +x ${TMPDIR}/${KUBERNETES_VERSION}-kubelet-${KUBE_ARCH}
    sudo cp ${TMPDIR}/${KUBERNETES_VERSION}-kubelet-${KUBE_ARCH} /usr/local/bin/kubelet
fi

### DOWNLOAD: cni
if [[ ! -e '${TMPDIR}'/'$CNI_VERSION'-cni-${KUBE_ARCH}.tgz && ! -e /opt/cni/bin ]]; then
    wget -O ${TMPDIR}/$CNI_VERSION-cni-${KUBE_ARCH}.tgz https://github.com/containernetworking/cni/releases/download/$CNI_VERSION/cni-${KUBE_ARCH}-$CNI_VERSION.tgz
    sudo mkdir -p /opt/cni/bin
    sudo tar -xf ${TMPDIR}/$CNI_VERSION-cni-${KUBE_ARCH}.tgz -C /opt/cni/bin/
fi

### DEPLOY KUBERNETES SELF-HOSTED CLUSTER:
echo_green "\nPhase VIII: Preparing the environment for Kubernetes to run for the first time:"
sudo systemctl daemon-reload
echo_yellow "\nEnabling and restarting the kubelet service..."
sudo systemctl enable kubelet.service
sudo systemctl restart kubelet.service
sudo service docker restart
echo_yellow "\nCopying the kubelet config..."
sudo cp ${BOOTKUBE_DIR}/kubeconfig /etc/kubernetes/
echo_yellow "\nCopying the kubelet certificate..."
sudo cp ${BOOTKUBE_DIR}/ca.crt /etc/kubernetes/
echo_green "\nCOMPLETE! ${HOSTNAME} has been added to the cluster."
